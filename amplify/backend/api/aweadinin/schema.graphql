type Blng @model @auth(rules: [{ allow: public }]) {
  id: ID!
  weeklySheet: [String!]
  status: String!
}

type WPTracking @model @auth(rules: [{ allow: public }]) {
  id: ID!
  tempID: String!
  supportletterReqDate: AWSDate!
  supportletterReceiveDate: AWSDate!
  letterfile: String!
  doesubmitdate: AWSDate!
  doeapprovedate: AWSDate!
  doeexpirydate: AWSDate!
  doefile: String!
  nlmssubmitdate: AWSDate!
  submissionrefrenceno: AWSDate!
  nlmsapprovedate: AWSDate!
  ldreferenceno: String!
  nlmsexpirydate: AWSDate!
  nlmsfile: String!
  bgsubmitdate: AWSDate!
  bgreceivedate: AWSDate!
  referenceno: String!
  bgamount: String!
  bgexpirydate: AWSDate!
  bgfile: String!
  tbapurchasedate: AWSDate!
  jitpaamount: String!
  jitpaexpirydate: AWSDate!
  receiptno: String!
  depositamount: String!
  submitdateendorsement: AWSDate!
  jitpafile: String!
  immbdno: String!
  docsubmitdate: AWSDate!
  visaapprovedate: AWSDate!
  visareferenceno: String!
  visaFile: String!
  departuredate: AWSDate!
  arrivaldate: AWSDate!
  cityname: String!
  airfare: String!
  airticketfile: String!
  agentname: String!
  mobSignDate: AWSDate!
  mobFile: String!
}

type TicketRequest @model @auth(rules: [{ allow: public }]) {
  id: ID!
  empID: String!
  departureDate: AWSDate
  arrivalDate: AWSDate
  destination: String
  remarks: String
  hrStatus: String
  hrDate: AWSDate
  hrRemarks: String
}

type EducationDetails @model @auth(rules: [{ allow: public }]) {
  id: ID!
  tempID: String!
  crime: String
  crimeDesc: String
  emgDetails: [String!]
  noExperience: String!
  empStatement: String!
  desc: String
  disease: String
  diseaseDesc: String
  liquor: String
  liquorDesc: String
  noticePeriod: String!
  perIS: String!
  perIDesc: String
  referees: [String]
  relatives: [String]
  salaryExpectation: String
  supportInfo: String
  uploadResume: String!
  uploadCertificate: String!
  uploadPp: String!
}

type PersonalDetails @model @auth(rules: [{ allow: public }]) {
  id: ID!
  tempID: String!
  age: Int!
  alternateNo: String
  agent: String
  bwnIcNo: String
  bwnIcExpiry: String
  bwnIcColour: String
  contactNo: String!
  cob: String!
  contractType: String!
  chinese: String
  dob: String!
  driveLic: String
  email: String!
  empType: String!
  eduDetails: [String!]
  familyDetails: [String]
  gender: String!
  lang: String!
  marital: String!
  name: String!
  nationality: String!
  otherNation: String
  otherRace: String
  otherReligion: String
  ppNo: String
  ppIssued: String
  ppExpiry: String
  ppDestinate: String
  presentAddress: String!
  permanentAddress: String!
  profilePhoto: String!
  position: String!
  race: String!
  religion: String!
  workExperience: [String]
}

type EmpPersonalInfo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  empID: String!
  age: Int
  aTQualify: String
  alternateNo: String
  agent: String
  contactNo: String!
  cob: String
  ctryOfOrigin: String
  chinese: String
  dob: String!
  educLevel: String
  email: String!
  eduDetails: [String]
  empBadgeNo: String
  empDocUpload: [String]
  familyDetails: [String]
  gender: String!
  lang: String
  marital: String!
  name: String!
  nationality: String!
  nationalCat: String
  otherNation: String
  oCOfOrigin: String
  otherRace: String
  otherReligion: String
  profilePhoto: String
  permanentAddress: String!
  race: String!
  religion: String!
  sapNo: String
}

type IDDetails @model @auth(rules: [{ allow: public }]) {
  id: ID!
  empID: String!
  bwnIcNo: String
  bwnIcColour: String
  bwnIcExpiry: String
  driveLic: String
  inducBrief: String
  inducBriefUp: String
  myIcNo: String
  ppNo: String
  ppIssued: String
  ppExpiry: String
  ppDestinate: String
  preEmp: String
  preEmpPeriod: String
  profilePhoto: String
}

type CandIToEMP @model @auth(rules: [{ allow: public }]) {
  id: ID!
  empID: String!
  crime: String
  crimeDesc: String
  emgDetails: [String!]
  noExperience: String!
  empStatement: String!
  desc: String
  disease: String
  diseaseDesc: String
  liquor: String
  liquorDesc: String
  perIS: String!
  perID: String
  referees: [String]
  relatives: [String]
  salaryExpectation: String
  supportInfo: String
  workExperience: [String]
}

type LabourDependentPass @model @auth(rules: [{ allow: public }]) {
  id: ID!
    empID: String!
      airTicketStatus: String!
  dependentName: String!
  dependentPassportNumber: String!
  dependentPassportExpiy: String!
     labourDepositPaidBy: String!
  labourDepositReceiptNumber: String!
  labourDepositAmount: String!
  passportLocation: String!
  reEntryVisaApplication: String!
  immigrationApprovalDate: String!
  reEntryVisaExpiry: String!

  relation: String!
 

}

type LabourMedicalInfo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  overseasMedicalDate: String!
  overseasMedicalExpiry: String!
  bruhimsRegistrationDate: String!
  bruhimsRegistrationNumber: String!
  bruneiMedicalAppointmentDate: String!
  bruneiMedicalExpiry: String!
  empID: String!
}

type LocalMobilization @model @auth(rules: [{ allow: public }]) {
  id: ID!
  tempID: String
  mobSignDate: AWSDate
  mobFile: String
  paafApproveDate: AWSDate
  paafFile: String
  loiIssueDate: AWSDate
  loiAcceptDate: AWSDate
  loiDeclineDate: AWSDate
  declineReason: String
  loiFile: String
  cvecApproveDate: AWSDate
  cvecFile: String
}

type LabourWorkPass @model @auth(rules: [{ allow: public }]) {
  id: ID!
  empID: String!
  workPermitType: String!
  arrivalStampingExpiry: String!
  employmentPassEndorsement: String!
  immigrationDeptDate: String!
  employmentPassExpiry: String!
  employmentPassStatus: String!
  labourUploadDoc: [String!]
  remarks: String
  LabourMedicalInfo: LabourMedicalInfo @hasOne
  LabourDependentPass: LabourDependentPass @hasOne
}

type LeaveWorkInfo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  leavePassageEntitlement: String!
  annualLeaveEntitlement: String!
  annualLeaveEffectDate: String!
  sickLeaveEntitlement: String!
  effectiveDateOfSickLeave: String!
  positionRevision: String!
  revisionSalaryPackage: String!
  leavePassageEntitlementRevision: String!
  effectiveDateOfLeavePassage: String!
  revisionAnnualLeave: String!
  annualEntitlementeffectiveDate: String!
  contractEffectDate: String!
  contractOfEmployee: String!
  remarksWorkInfo: String
  empID: String!
}

type TerminationWorkInfo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  resignationDate: String!
  terminationDate: String!
  terminationNoticeProbation: String!
  terminationNoticeConfirmation: String!
  resignationNoticeProbation: String!
  resignationNoticeConfirmation: String!
  reasonOfResignation: String!
  reasonOfTermination: String!
  destinationOfEntitlement: String!
  durationPeriodEntitlement: String!
  dateOfEntitlement: String!
  empID: String!
}

type EmployeeWorkInfo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  empID: String!
  dateOfJoin: String!
  department: String
  workPosition: String
  upgradePosition: String!
  jobDescription: String!
  skillPool: String!
  workStatus: String!
  contractStartDate: String!
  contractEndDate: String!
  contractPeriodStatus: String!
  ProbationaryStartDate: String!
  ProbationaryEndDate: String!
  normalWorkingHours: String!
  normalWorkingWeek: String!
  salaryType: String!
  normalWorkingMonth: String
  employmentWorkStatus: String!
  jobCategory: String!
  otherJobCategory: String
  upgradeDate: String!
  TerminationWorkInfo: TerminationWorkInfo @hasOne
  LeaveWorkInfo: LeaveWorkInfo @hasOne
}

type InterviewScheduleSchema @model @auth(rules: [{ allow: public }]) {
  id: ID!
  date: AWSDate!
  time: String!
  venue: String!
  interviewType: String!
  interviewer: String!
  message: String
  tempID: String!
  candidateStatus: String
  department: String
}

type EmployeeNonLocalAcco @model @auth(rules: [{ allow: public }]) {
  id: ID!
  accommodation: String!
  accommodationAddress: String!
  empID: String!
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  empID: String!
  selectType: String!
  setPermissions: [String]
  password: String!
}

type LeaveStatus @model @auth(rules: [{ allow: public }]) {
  id: ID!
  empID: ID!
  leaveType: String!
  fromDate: AWSDate!
  toDate: AWSDate!
  days: Float!
  applyTo: [String!]
  reason: String!
  medicalCertificate: String
  supervisorStatus: String
  supervisorDate: AWSDate
  supervisorRemarks: String
  managerStatus: String
  managerDate: AWSDate
  managerRemarks: String
  empStatus: String
  empDate: AWSDate
  empRemarks: String
}

type SampleTest1 @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  email: String
  gender: String
  empID: String
  password: String
  tempID: String
}
